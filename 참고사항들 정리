virtual DOM - diff로 변경
==================================================
CSR SSR
* CSR : html 다운 -> DOM & Style 보임
웹 app 자바스크립트 전체 다운 -> 실행 가능
빈 껍데기 내려온다 -> JS 파일 요청 -> JS 다시 다운 -> 브라우저 리엑트 로드 -> 특정 컴포넌트 실행 (요때 보임)
==> JS 가 전부 다운로드 되어 리액트 애플리케이션이 정상 실행되기 전까지는 화면이 보이지 않음.
==> JS 가 전부 다운로드 되어 리액트 애플리케이션이 정상 실행된 후, 화면이 보이면서 유저가 인터렉션 가능
==================================================
* SSR
최초에 이미 html이 표현되어 있는 것을 다운 -> JS 보여주세요 (보이긴 함 하지만 동작은 안됨 미리 랜더만 되는 거임) -> 리액트 앱 실행 (이때도 동작은 X) -> 브라우저에서 실행
==> JS 가 전부 다운로드 되지 않아도, 일단 화면은 보이지만 유저가 사용 할 수 없음.
==> JS 가 전부 다운로드 되어 리액트 애플리케이션이 정상 실행된 후, 유저가 사용 가능
==================================================
개발환경 체크
Node.js (LTS 안정화 된거 / Current 실험버전)
-​ Installer
- nvm
Browser (Chrome)
Git
VSCode
==================================================
리액트가 하는 일
// 1. 리액트 컴포넌트 => HTMLElement 연결하기
import ReactDOM from 'react-dom';

// 2. 리액트 컴포넌트 만들기
import React from 'react';
==================================================
"만들어진 리액트 컴포넌트" 를 실제 HTMLElement 에 연결할 때 ReactDOM 라이브러리를 이용
ReactDOM.render(
  <HelloMessage name="Taylor" />,
  
  document.getElementById('hello-example'),
);
{ React 컴포넌트 } - JS, JSX => < HTMLElement >
==================================================
폴더 생성 > vs code 실행
1. npm 프로젝트로 만들기
npm init -y

2. 파일서버처럼 만들기
npx serve
==================================================
Hooks 이후
class
function
==================================================
JSX

JSX 문법으로 작성된 코드는 순수한 JavaScript 로 컴파일 하여 사용한다.

누가 해주나요?? => babel
https://babeljs.io/setup#installation => in the browser
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
<!-- Your custom script here -->
<script type="text/babel">
왜 JSX 을 쓰나요??
React.createElement VS JSX
가독성 완승
babel 과 같은 컴파일 과정에서 문법적 오류를 인지하기 쉬움
==================================================
JSX 문법
1. 최상위 요소가 하나여야 합니다.
2. 최상위 요소 리턴하는 경우, ( ) 로 감싸야 합니다.
3. 자식들을 바로 랜더링하고 싶으면, <>자식들</> 를 사용합니다. => Fragment
4. 자바스크립트 표현식을 사용하려면, {표현식} 를 이용합니다.
5. if 문은 사용할 수 없습니다.
5-1. 삼항 연산자 혹은 && 를 사용합니다.
6. style 을 이용해 인라인 스타일링이 가능합니다.
7. class 대신 className 을 사용해 class 를 적용할 수 있습니다.
8. 자식요소가 있으면, 꼭 닫아야 하고, 자식요소가 없으면 열면서 닫아야 합니다.
<p>어쩌구</p>
<br />
==================================================
Props 와 State
Props 는 컴포넌트 외부에서 컴포넌트에게 주는 데이터입니다.
State 는 컴포넌트 내부에서 변경할 수 있는 데이터입니다.
둘 다 변경이 발생하면, 랜더가 다시 일어날 수 있습니다.

Render 함수
Props 와 State 를 바탕으로 컴포넌트를 그립니다.
그리고 Props 와 State 가 변경되면, 컴포넌트를 다시 그립니다.
컴포넌트를 그리는 방법을 기술하는 함수가 랜더 함수 입니다.

this.setState({s: '새 스테이트'}); // state 값 업데이트
==================================================
Event Handling
HTML DOM 에 클릭하면 이벤트가 발생하고, 발생하면 그에 맞는 변경이 일어나도록 해야합니다.
JSX 에 이벤트를 설정할 수 있습니다.

camelCase 로만 사용할 수 있습니다.
- onClick, onMouseEnter
이벤트에 연결된 자바스크립트 코드는 함수입니다.
- 이벤트 명={함수} 와 같이 씁니다.
실제 DOM 요소들에만 사용 가능합니다.
- 리액트 컴포넌트에 사용하면, 그냥 props 로 전달합니다.

==================================================
Component Lifecycle

componentWillReceiveProps
props 를 새로 지정했을 때 바로 호출됩니다.
여기는 state 의 변경에 반응하지 않습니다.
- 여기서 props 의 값에 따라 state 를 변경해야 한다면,
-- setState 를 이용해 state 를 변경합니다.
그러면 다음 이벤트로 각각 가는것이 아니라--  한번에 변경됩니다.

shouldComponentUpdate
props 만 변경되어도
state 만 변경되어도
props & state 둘다 변경되어도
newProps 와 new State 를 인자로 해서 호출
return type 이 boolean 입니다.
- true 면 render
- false 면 render 가 호출되지 않습니다.
- 이 함수를 구현하지 않으면, 디폴트는 true

componentWillUpdate
컴포넌트가 재 랜더링 되기 직전에 불립니다.
여기선 setState 같은 것을 쓰면 아니됩니다.

componentDidUpdate
컴포넌트가 재 랜더링을 마치면 불립니다.

Component 언마운트
componentWillUnmpunt






































